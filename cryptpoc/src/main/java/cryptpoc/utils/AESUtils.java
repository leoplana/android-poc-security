package cryptpoc.utils;

import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Optional;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AESUtils {

	private static final String TRANSFORMATION = "CBC/PKCS5Padding";
	private static final String ALGORITHM = "AES";

	private static final Logger LOGGER = LoggerFactory.getLogger(AESUtils.class);

	private AESUtils() {
		super();
	}

	public static String generateIvPass() {
		try {
			final SecureRandom rng = new SecureRandom();
			final SecretKey aesKey = createKey(ALGORITHM, 128, Optional.<Provider>empty(), Optional.of(rng));
			final Cipher aesCBC = Cipher.getInstance(String.format("%s/%s", ALGORITHM, TRANSFORMATION));
			final IvParameterSpec ivForCBC = createIV(aesCBC.getBlockSize(), Optional.of(rng));
			String ivString = Base64.getEncoder().encodeToString(ivForCBC.getIV());
			String keyString = Base64.getEncoder().encodeToString(aesKey.getEncoded());
			return ivString + ":" + keyString;
		} catch (Exception e) {
			return null;
		}
	}

	public static String encrypt(String iv, String key, String message) {
		try {
			IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(iv));
			SecretKeySpec skeySpec = new SecretKeySpec(Base64.getDecoder().decode(key), ALGORITHM);
			Cipher cipher = Cipher.getInstance(String.format("%s/%s", ALGORITHM, TRANSFORMATION));
			cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivSpec);
			byte[] encrypted = cipher.doFinal(message.getBytes());
			return Base64.getEncoder().encodeToString(encrypted);
		} catch (Exception e) {
			LOGGER.warn(String.format("Failed encrypt value: %s.", message), e);
		}
		return null;
	}

	public static String decrypt(String iv, String key, String message) {
		try {
			IvParameterSpec ivSpec = new IvParameterSpec(Base64.getDecoder().decode(iv));
			SecretKeySpec skeySpec = new SecretKeySpec(Base64.getDecoder().decode(key), ALGORITHM);
			Cipher cipher = Cipher.getInstance(String.format("%s/%s", ALGORITHM, TRANSFORMATION));
			cipher.init(Cipher.DECRYPT_MODE, skeySpec, ivSpec);
			byte[] original = cipher.doFinal(Base64.getDecoder().decode(message));
			return new String(original);
		} catch (Exception e) {
			LOGGER.warn(String.format("Failed decrypt value: %s.", message), e);
		}
		return null;
	}

	private static SecretKey createKey(final String algorithm, final int keysize, Optional<Provider> provider,
			final Optional<SecureRandom> rng) throws NoSuchAlgorithmException {
		final KeyGenerator keyGenerator;
		if (provider.isPresent()) {
			keyGenerator = KeyGenerator.getInstance(algorithm, provider.get());
		} else {
			keyGenerator = KeyGenerator.getInstance(algorithm);
		}

		if (rng.isPresent()) {
			keyGenerator.init(keysize, rng.get());
		} else {
			keyGenerator.init(keysize);
		}
		return keyGenerator.generateKey();
	}

	private static IvParameterSpec createIV(final int ivSizeBytes, final Optional<SecureRandom> rng) {
		final byte[] iv = new byte[ivSizeBytes];
		final SecureRandom theRNG = rng.orElse(new SecureRandom());
		theRNG.nextBytes(iv);
		return new IvParameterSpec(iv);
	}

	public static void main(String[] args) {

		String iv = "D/0mfJ8ensipmQByEjv0SQ==";
		String pass = "xjKWwlo9NXrd1etosCaeYg==";

		System.out.println(AESUtils.decrypt(iv, pass,
				""));

	}

}
